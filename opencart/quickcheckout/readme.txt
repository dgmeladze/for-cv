Задача.
Стандартная форма оформления заказа opencart имеет несколько шагов, каждый из которых подгружается javascript'ом
после выполнения предыдущего (итого по сути 5 форм). Этот способ оформления заказа весьма популярен в США и Европе, где
нужно заполнить очень много информации ради простого заказа. В РФ это дело упрощено.
Самый популярный модуль, который это исправляет - simple. Но он имеет очень много лишнего функционала,
и немного тормознутый.
В ситуации конкретного модуля нужно было сделать
1. Форму на 1 страницу, без шагов.
2. Сделать эту форму более быстрой, так как корзина "большая", сайт оптовиков. И порой в корзине свыше 500 наименований.

Условия.
На сайте установлен модуль был JetCache, который ускорял работу сайта.
Бюджет не безразмерный, а так же, так как заказчик не мог получать большие, а значит самые выгодные, заказы, то
максимально срочная.
Opencart использует jquery, swiper js, модель MVC, twig.

Описание.
Модуль не имеет представления в админ панели.
ВАЖНО! Модуль JetCache так же работал с сессиями, которые важны для работы формы оформления заказа, поэтому пришлось
его убрать. Вместо него был добавлен memcached для кеширования базы данных, что весьма ускорило, а для сессий
использовался redis (получил много "позитива", устанавливая redis на php 7.3 на debian 12 с ispmanager).
Так как этот модуль более обширный, чем прочие, я добавил сам опенкарт в папку. Но не тот сайт, для которого
разрабатывал, а "коробочный", поэтому классы html могут не быть в css

Первым шагом было определение максимально "медленных" частей кода. Этим оказался вызов total.
Важно понимать, что total для заказа в opencart - это модули.
- Для продажи модуля нужно было бы продумывать этот аспект отдельно.
  Я бы реализовал подгрузку total через javascript после генерации страницы, чтобы человек мог бы
  побыстрее начать заполнять форму без ожидания.
- Для конкретного сайта при отсутствии ограничений по времени я бы оптимизировал так же total.

Однако ограничение по времени и то, что разработка была для кокретного проекта, где особо не меняется, позволило
реализовать проще и подсчитать иначе.

В рамках public function index() мы формируем вывод, "заполняем" поля из данных пользователя, формируем список адресов
и т.д. На странице вывода мы даем так же пользователю выбор адреса из списка, подгружаем корзину,
так как ее формирование занимает не мало времени.

Так же сайт "не ждет", пока запишется в бд, и выдает страницу оформленного заказа.
Модель так же "не надеется на бд", так как периодически, к сожалению, на хостинге бывают сбои. В первую очередь с бд.
Поэтому скрипт "пробует" записать. А если не получается, то мы пишем в файл. Риски при заказе в 5000 рублей - это риск
получить одного, возможно, "случайного" клиента, который не факт, что закажет еще раз, и потерять небольшое количество
денег. Но в оптовом сегменте потеря заказа может обернуться недовольством постоянного клиента, каждый заказ которого
в сумме - 500 000 рублей, а магазин может недосчитаться значительной доли прибыли.


Хочу отметить, что я не могу назвать задачу идеально решенной. Я - перфекционист, но иногда в стрессовых ситуациях
как минимум временно приходится писать "быстрые решения".

Затем есть функция своего добавления заказа, к которой мы обращаемся при отправки формы, которая
1) Использует свою функцию записи в бд. Это немного костыльный момент, так как я не стал записывать все
по всем стандартам opencart, но для решения задачи это и не требовалось.
2) Отправляет письмо о заказе посредством своего шаблона для отправки.

Список измененных/добавленных файлов для самого quickcheckout:
В catalog/controller
- checkout/quickcheckout.php
- checkout/quickcart.php
В catalog/view
- theme/default/template/checkout/quickcheckout.twig
- theme/default/template/mail/quickorder_add.twig
В catalog/model
- checkout/quickcheckout.php

Важно отметить, что я не делал редирект со стандартных корзины и оформления заказа потому, что редиректы - не супер
в таких ситуациях, и лучше всего в самом шаблоне встраивать ссылку.



Список измененных/добавленных файлов для memcached и redis:
- config.php (оба конфига имеют уже прописанные данные, как будто сайт установлен. из "коробки" опенкарт имеет пустые
конфиги до прохождения установки).
- admin/config.php (здесь только для redis)
- system/config/catalog.php
- system/config/default.php
- system/library/session/redis.php
- system/library/cache/memcached.php
- system/library/cache/redis.php
- system/library/db/mysqli_memcached.php

Насчет mysqli_memcached - использовал чужую наработку, каюсь, но опять же время играло очень важную роль.


Модуль написан 2 года назад для решения конкретной практической задачи с условиями.
